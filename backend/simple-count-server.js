const express = require("express");
const cors = require("cors");
const puppeteer = require("puppeteer");
const path = require("path");
const fs = require("fs");

const app = express();
const PORT = process.env.PORT || 3012; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ 3012

app.use(cors());
app.use(express.json());

function log(message) {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${message}`);
}

const uploadDir = "./uploads";
const screenshotDir = "./uploads/screenshots";

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}
if (!fs.existsSync(screenshotDir)) {
  fs.mkdirSync(screenshotDir, { recursive: true });
}

app.use("/uploads", express.static(uploadDir));

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Ñ—Ä–æ–Ω—Ç–∞
app.use(express.static(path.join(__dirname, "../frontend/dist")));

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (SPA)
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "../frontend/dist/index.html"));
});

app.get("/api/health", (req, res) => {
  res.json({ status: "ok", timestamp: new Date().toISOString() });
});

app.post("/api/reports", async (req, res) => {
  const { channelUrl, startDate, endDate } = req.body;

  if (!channelUrl || !startDate || !endDate) {
    return res.status(400).json({
      success: false,
      error: "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã channelUrl, startDate –∏ endDate",
    });
  }

  const id = Date.now();
  const username = channelUrl.replace("https://t.me/", "").replace("@", "");

  log(`üìù –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: ${channelUrl}, ${startDate} - ${endDate}`);
  log(`üÜî –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç ${id} –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${username}`);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É
  res.json({
    success: true,
    id: id,
    message: "–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è...",
  });

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Ñ–æ–Ω–µ
  log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ...");
  try {
    const result = await processChannel(username, startDate, endDate);

    log(`üìä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞:`);
    log(
      `   –°–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: ${
        result.screenshots ? result.screenshots.length : 0
      }`
    );

    const reportData = {
      id: id,
      channel_url: channelUrl,
      channel_username: username,
      start_date: startDate,
      end_date: endDate,
      created_at: new Date().toISOString(),
      total_posts: result.total,
      posts_in_period: result.inPeriod,
      posts_details: result.details,
      screenshots: result.screenshots || [],
      stats: result.stats || {
        totalChars: 0,
        avgChars: 0,
        postsWithText: 0,
      },
    };

    log(`   –°–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤ –æ—Ç—á–µ—Ç–µ: ${reportData.screenshots.length}`);

    const reportPath = path.join(uploadDir, `report_${id}.json`);
    fs.writeFileSync(reportPath, JSON.stringify(reportData, null, 2));
    log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ ${reportPath}`);
    log("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: ${error.message}`);
  }
});

app.get("/api/reports/:id", (req, res) => {
  const { id } = req.params;
  log(`üìã –ó–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞ ${id}`);

  try {
    const reportPath = path.join(uploadDir, `report_${id}.json`);

    if (fs.existsSync(reportPath)) {
      log(`‚úÖ –û—Ç—á–µ—Ç ${id} –Ω–∞–π–¥–µ–Ω`);
      const reportData = JSON.parse(fs.readFileSync(reportPath, "utf8"));
      res.json({
        success: true,
        data: reportData,
      });
    } else {
      log(`‚ùå –û—Ç—á–µ—Ç ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      res.status(404).json({
        success: false,
        error: "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: ${error.message}`);
    res.status(500).json({
      success: false,
      error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞",
    });
  }
});

async function processChannel(channelUsername, startDate, endDate) {
  log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª @${channelUsername} —Å ${startDate} –ø–æ ${endDate}`);

  let browser = null;

  try {
    log("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...");
    browser = await puppeteer.launch({
      headless: true, // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º
      args: [
        "--no-sandbox",
        "--disable-setuid-sandbox",
        "--disable-dev-shm-usage",
        "--disable-gpu",
        "--disable-web-security",
        "--disable-features=VizDisplayCompositor",
        "--disable-background-timer-throttling",
        "--disable-backgrounding-occluded-windows",
        "--disable-renderer-backgrounding",
      ],
    });

    log("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...");
    const page = await browser.newPage();

    log("üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent...");
    await page.setUserAgent(
      "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
    );

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    const apiRequests = [];

    page.on("request", (request) => {
      if (
        request.url().includes("api.telegram.org") ||
        request.url().includes("t.me")
      ) {
        apiRequests.push({
          url: request.url(),
          method: request.method(),
          headers: request.headers(),
        });
        log(`   üì° API –∑–∞–ø—Ä–æ—Å: ${request.method()} ${request.url()}`);
      }
    });

    page.on("response", (response) => {
      if (
        response.url().includes("api.telegram.org") ||
        response.url().includes("t.me")
      ) {
        log(`   üì° API –æ—Ç–≤–µ—Ç: ${response.status()} ${response.url()}`);
      }
    });

    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    await page.evaluateOnNewDocument(() => {
      // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º scrollTo –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã
      const originalScrollTo = window.scrollTo;
      window.scrollTo = function (x, y) {
        console.log(`–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫: ${x}, ${y}`);
        return originalScrollTo.call(this, x, y);
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      let isLoading = false;
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting && !isLoading) {
            isLoading = true;
            console.log("–≠–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º, –∑–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...");
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
            setTimeout(() => {
              window.scrollTo(0, document.body.scrollHeight);
              isLoading = false;
            }, 1000);
          }
        });
      });

      // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
      const observeLastElement = () => {
        const messages = document.querySelectorAll(".tgme_widget_message");
        if (messages.length > 0) {
          observer.observe(messages[messages.length - 1]);
        }
      };

      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
      setTimeout(observeLastElement, 2000);
    });

    const channelUrl = `https://t.me/${channelUsername}`;
    log(`üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º ${channelUrl}...`);

    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    let pageLoaded = false;
    let attempts = 0;
    const maxAttempts = 3;

    while (!pageLoaded && attempts < maxAttempts) {
      attempts++;
      try {
        log(`   –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts} –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...`);
        await page.goto(channelUrl, {
          waitUntil: "domcontentloaded",
          timeout: 120000,
        });
        pageLoaded = true;
        log("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–Ω–∞–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
      } catch (error) {
        log(`   ‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempts} –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error.message}`);
        if (attempts < maxAttempts) {
          log(`   ‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
          await new Promise((resolve) => setTimeout(resolve, 5000));
        } else {
          log(`   ‚ö†Ô∏è –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏...`);
          try {
            await page.goto(channelUrl, {
              waitUntil: "load",
              timeout: 60000,
            });
            pageLoaded = true;
            log("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º");
          } catch (altError) {
            throw new Error(
              `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫: ${altError.message}`
            );
          }
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pageTitle = await page.title();
    log(`üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageTitle}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    const currentUrl = page.url();
    log(`üîó –¢–µ–∫—É—â–∏–π URL: ${currentUrl}`);

    if (!currentUrl.includes(channelUsername)) {
      throw new Error(
        `–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –û–∂–∏–¥–∞–ª—Å—è –∫–∞–Ω–∞–ª ${channelUsername}, –ø–æ–ª—É—á–µ–Ω URL: ${currentUrl}`
      );
    }

    await new Promise((resolve) => setTimeout(resolve, 5000));
    log("‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...");

    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "Preview Channel"
    log("üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É Preview Channel...");
    const previewButtonClicked = await page.evaluate(() => {
      // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
      const selectors = [
        'button[data-action="preview"]',
        ".tgme_action_button",
        'button:contains("Preview")',
        'a[href*="preview"]',
        ".tgme_widget_message_wrap button",
        'button[class*="preview"]',
        'button[class*="action"]',
      ];

      for (const selector of selectors) {
        try {
          const button = document.querySelector(selector);
          if (button && button.offsetParent !== null) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–∏–º–∞
            button.click();
            console.log(`–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: ${selector}`);
            return true;
          }
        } catch (e) {
          console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–∫–∏ ${selector}:`, e);
        }
      }

      // –ò—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
      const buttons = document.querySelectorAll("button, a");
      for (const button of buttons) {
        const text = button.textContent.toLowerCase();
        if (
          text.includes("preview") ||
          text.includes("–ø—Ä–æ—Å–º–æ—Ç—Ä") ||
          text.includes("–∫–∞–Ω–∞–ª")
        ) {
          if (button.offsetParent !== null) {
            button.click();
            console.log(`–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: ${text}`);
            return true;
          }
        }
      }

      return false;
    });

    if (previewButtonClicked) {
      log("‚úÖ –ö–Ω–æ–ø–∫–∞ Preview Channel –Ω–∞–∂–∞—Ç–∞");
      await new Promise((resolve) => setTimeout(resolve, 3000));
      log("‚è≥ –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏...");
    } else {
      log("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ Preview Channel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const initialPosts = await page.evaluate(() => {
      const posts = document.querySelectorAll(".tgme_widget_message");
      return posts.length;
    });
    log(`üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: ${initialPosts}`);

    // –ï—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –µ—â–µ —Ä–∞–∑ –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É
    if (initialPosts === 0) {
      log("‚ö†Ô∏è –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –µ—â–µ —Ä–∞–∑ –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É...");
      await new Promise((resolve) => setTimeout(resolve, 2000));

      const retryButtonClicked = await page.evaluate(() => {
        // –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const allElements = document.querySelectorAll(
          'button, a, [role="button"]'
        );
        for (const element of allElements) {
          const text = element.textContent.toLowerCase();
          const className = element.className.toLowerCase();
          const href = element.href || "";

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
          if (
            text.includes("preview") ||
            text.includes("–ø—Ä–æ—Å–º–æ—Ç—Ä") ||
            text.includes("–∫–∞–Ω–∞–ª") ||
            text.includes("view") ||
            className.includes("preview") ||
            className.includes("action") ||
            href.includes("preview")
          ) {
            if (element.offsetParent !== null) {
              element.click();
              console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: ${text} (${className})`);
              return true;
            }
          }
        }
        return false;
      });

      if (retryButtonClicked) {
        log("‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ");
        await new Promise((resolve) => setTimeout(resolve, 3000));
      }
    }

    // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Å—Ç–∞–º
    log("üîç –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤...");

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É "View in Telegram" –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const viewInTelegramButton = await page.evaluate(() => {
      const buttons = document.querySelectorAll("button, a");
      for (const button of buttons) {
        const text = button.textContent.toLowerCase();
        if (
          text.includes("view in telegram") ||
          text.includes("open in telegram")
        ) {
          return button.href || button.getAttribute("data-href");
        }
      }
      return null;
    });

    if (viewInTelegramButton) {
      log(`   üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ Telegram: ${viewInTelegramButton}`);
    }

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ—Å—Ç–∞–º–∏
    log("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ—Å—Ç–∞–º–∏...");

    try {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ—Å—Ç–∞–º–∏
      const postsUrl = `https://t.me/s/${channelUsername}`;
      log(`   üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ ${postsUrl}`);

      await page.goto(postsUrl, {
        waitUntil: "networkidle2",
        timeout: 60000,
      });

      log("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ—Å—Ç–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      let postsCount = 0;
      let attempts = 0;
      const maxAttempts = 5;

      while (postsCount <= 20 && attempts < maxAttempts) {
        attempts++;
        log(`   ‚è≥ –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts} –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤...`);

        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤
        await new Promise((resolve) => setTimeout(resolve, 3000));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
        postsCount = await page.evaluate(() => {
          return document.querySelectorAll(".tgme_widget_message").length;
        });

        log(`   üìä –ü–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}): ${postsCount}`);

        if (postsCount <= 20 && attempts < maxAttempts) {
          log(
            `   ‚ö†Ô∏è –ú–∞–ª–æ –ø–æ—Å—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –í–í–ï–†–• –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤...`
          );
          // –ü—Ä–æ–±—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –í–í–ï–†–• –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
          await page.evaluate(() => {
            window.scrollTo(0, 0);
            window.scrollBy(0, -2000);
          });
          await new Promise((resolve) => setTimeout(resolve, 2000));
        }
      }

      if (postsCount <= 20) {
        log(
          `   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–ª—å–∫–æ ${postsCount} –ø–æ—Å—Ç–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏`
        );
      } else {
        log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${postsCount} –ø–æ—Å—Ç–æ–≤`);
      }
    } catch (error) {
      log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ—Å—Ç–∞–º–∏: ${error.message}`);
    }

    // –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º —É–º–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å –¥—Ä—É–≥–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
    log("üìú –ù–∞—á–∏–Ω–∞–µ–º —É–º–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ–π –¥–∞—Ç—ã...");
    const maxScrolls = 200; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –µ—â–µ –±–æ–ª—å—à–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤
    let scrollCount = 0;
    let foundTargetDate = false;
    let lastCheckedDate = null;
    let lastPostCount = 0;
    let noProgressCount = 0;

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
    lastPostCount = await page.evaluate(() => {
      return document.querySelectorAll(".tgme_widget_message").length;
    });
    log(`   üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: ${lastPostCount}`);

    // –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –í–í–ï–†–• –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤
    log(
      "   üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –í–í–ï–†–• –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤..."
    );
    for (let initScroll = 0; initScroll < 15; initScroll++) {
      await page.evaluate(() => {
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –í–í–ï–†–• –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤
        window.scrollTo(0, 0);
        window.scrollBy(0, -3000);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö
        setTimeout(() => {
          window.scrollBy(0, -2000);
        }, 100);
      });

      await new Promise((resolve) => setTimeout(resolve, 2000));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 3 –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
      if (initScroll % 3 === 0) {
        const currentPosts = await page.evaluate(() => {
          return document.querySelectorAll(".tgme_widget_message").length;
        });
        log(
          `   üìä –ü–æ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ ${
            initScroll + 1
          } –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∫—Ä—É—Ç–æ–∫ –í–í–ï–†–•: ${currentPosts}`
        );
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    lastPostCount = await page.evaluate(() => {
      return document.querySelectorAll(".tgme_widget_message").length;
    });
    log(`   üìä –ü–æ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: ${lastPostCount}`);

    for (let i = 0; i < maxScrolls && !foundTargetDate; i++) {
      scrollCount++;

      // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –í–í–ï–†–• –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤
      await page.evaluate(() => {
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –í–í–ï–†–• –Ω–∞ 2000px –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤
        window.scrollBy(0, -2000);

        // –¢–∞–∫–∂–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Å–∞–º–æ–º—É –≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.scrollTo(0, 0);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
          window.scrollBy(0, -1000);
        }, 500);
      });

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
      await new Promise((resolve) => setTimeout(resolve, 4000));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã –∫–∞–∂–¥—ã–µ 5 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫ –≤ –Ω–∞—á–∞–ª–µ, –ø–æ—Ç–æ–º –∫–∞–∂–¥—ã–µ 10
      if (scrollCount % (scrollCount <= 20 ? 5 : 10) === 0) {
        log(`   üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ ${scrollCount} –ø—Ä–æ–∫—Ä—É—Ç–æ–∫...`);

        const dateCheck = await page.evaluate(
          (startDate, endDate) => {
            const posts = document.querySelectorAll(".tgme_widget_message");
            let totalPosts = posts.length;
            let earliestDate = null;
            let latestDate = null;
            let foundTarget = false;

            posts.forEach((post) => {
              const timeElement = post.querySelector(
                ".tgme_widget_message_date time"
              );
              if (timeElement) {
                const dateText = timeElement.getAttribute("datetime");
                if (dateText) {
                  const postDate = new Date(dateText);
                  const postDateOnly = new Date(
                    postDate.getFullYear(),
                    postDate.getMonth(),
                    postDate.getDate()
                  );

                  if (!earliestDate || postDateOnly < earliestDate) {
                    earliestDate = postDateOnly;
                  }
                  if (!latestDate || postDateOnly > latestDate) {
                    latestDate = postDateOnly;
                  }

                  const start = new Date(startDate);
                  const end = new Date(endDate);
                  const startDateOnly = new Date(
                    start.getFullYear(),
                    start.getMonth(),
                    start.getDate()
                  );
                  const endDateOnly = new Date(
                    end.getFullYear(),
                    end.getMonth(),
                    end.getDate()
                  );

                  if (
                    postDateOnly >= startDateOnly &&
                    postDateOnly <= endDateOnly
                  ) {
                    foundTarget = true;
                  }
                }
              }
            });

            return {
              totalPosts,
              earliestDate: earliestDate
                ? earliestDate.toISOString().split("T")[0]
                : null,
              latestDate: latestDate
                ? latestDate.toISOString().split("T")[0]
                : null,
              foundTarget,
            };
          },
          startDate,
          endDate
        );

        log(`      üìà –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: ${dateCheck.totalPosts}`);
        log(`      üìÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –¥–æ –¥–∞—Ç—ã: ${dateCheck.latestDate}`);
        log(`      üìÖ –°–∞–º–∞—è —Ä–∞–Ω–Ω—è—è –¥–∞—Ç–∞: ${dateCheck.earliestDate}`);
        log(`      üéØ –ò—â–µ–º –ø–æ—Å—Ç—ã —Å: ${startDate} –ø–æ ${endDate}`);

        if (dateCheck.foundTarget) {
          log(`      ‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ—Å—Ç—ã –Ω—É–∂–Ω–æ–π –¥–∞—Ç—ã! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É`);
          foundTargetDate = true;
          break;
        } else {
          log(`      ‚ö†Ô∏è –ü–æ—Å—Ç—ã –Ω—É–∂–Ω–æ–π –¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É`);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
      const currentPosts = await page.evaluate(() => {
        return document.querySelectorAll(".tgme_widget_message").length;
      });
      log(`   üìä –ü–æ—Å—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: ${currentPosts}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
      if (currentPosts === lastPostCount) {
        noProgressCount++;
        log(`   ‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (${noProgressCount}/3)`);

        if (noProgressCount >= 3) {
          log(`   üö® –ù–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è`);
          break;
        }
      } else {
        noProgressCount = 0;
        log(`   ‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å: +${currentPosts - lastPostCount} –ø–æ—Å—Ç–æ–≤`);
      }

      lastPostCount = currentPosts;
    }

    if (!foundTargetDate) {
      log(`   ‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø–æ—Å–ª–µ ${scrollCount} –ø–æ–ø—ã—Ç–æ–∫`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
    log("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã...");
    const result = await page.evaluate(
      (startDate, endDate, channelUsername) => {
        const postElements = document.querySelectorAll(".tgme_widget_message");
        console.log(`–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å—Ç–æ–≤: ${postElements.length}`);

        const allPosts = [];
        const postsInPeriod = [];

        postElements.forEach((element, index) => {
          try {
            const fullPostId = element.getAttribute("data-post");
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ ID
            const postId = fullPostId ? fullPostId.split("/").pop() : null;
            console.log(
              `–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç ${
                index + 1
              }: –ø–æ–ª–Ω—ã–π ID = ${fullPostId}, ID = ${postId}`
            );
            const timeElement = element.querySelector(
              ".tgme_widget_message_date time"
            );
            const dateText = timeElement
              ? timeElement.getAttribute("datetime")
              : null;
            const dateDisplay = timeElement ? timeElement.textContent : null;

            if (postId && dateText) {
              // –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
              let views = "0";
              let forwards = "0";
              let replies = "0";
              try {
                const viewsElement = element.querySelector(
                  ".tgme_widget_message_views"
                );
                const forwardsElement = element.querySelector(
                  ".tgme_widget_message_forwards"
                );
                const repliesElement = element.querySelector(
                  ".tgme_widget_message_replies"
                );

                if (viewsElement && viewsElement.textContent.trim()) {
                  views = viewsElement.textContent.trim();
                }
                if (forwardsElement && forwardsElement.textContent.trim()) {
                  forwards = forwardsElement.textContent.trim();
                }
                if (repliesElement && repliesElement.textContent.trim()) {
                  replies = repliesElement.textContent.trim();
                }
              } catch (e) {
                views = "0";
                forwards = "0";
                replies = "0";
              }

              const postInfo = {
                id: postId,
                date: dateText,
                display: dateDisplay,
                index: index,
                views: views,
                forwards: forwards,
                replies: replies,
              };

              allPosts.push(postInfo);

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –ø–æ—Å—Ç –ø–æ –¥–∞—Ç–µ
              const postDate = new Date(dateText);
              const start = new Date(startDate);
              const end = new Date(endDate);

              const postDateOnly = new Date(
                postDate.getFullYear(),
                postDate.getMonth(),
                postDate.getDate()
              );
              const startDateOnly = new Date(
                start.getFullYear(),
                start.getMonth(),
                start.getDate()
              );
              const endDateOnly = new Date(
                end.getFullYear(),
                end.getMonth(),
                end.getDate()
              );

              if (
                postDateOnly >= startDateOnly &&
                postDateOnly <= endDateOnly
              ) {
                postsInPeriod.push(postInfo);
                console.log(
                  `‚úÖ –ü–æ—Å—Ç ${postId} –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –¥–∞—Ç–µ: ${dateDisplay}`
                );
              }
            }
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞:", error);
          }
        });

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–æ–≤
        const postsWithText = [];
        postsInPeriod.forEach((post) => {
          // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å—Ç–∞ –ø–æ –ø–æ–ª–Ω–æ–º—É ID (—Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞)
          const fullPostId = `${channelUsername}/${post.id}`;
          const postElement = document.querySelector(
            `[data-post="${fullPostId}"]`
          );
          let text = "";
          let cleanText = "";

          if (postElement) {
            console.log(`–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å—Ç–∞ –¥–ª—è ${post.id}`);
            const textElement = postElement.querySelector(
              ".tgme_widget_message_text"
            );
            if (textElement) {
              text = textElement.textContent.trim();
              console.log(
                `–ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ ${post.id}: "${text.substring(0, 50)}..."`
              );
              // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Å–º–∞–π–ª–æ–≤ –∏ —Å—Å—ã–ª–æ–∫
              cleanText = text
                .replace(
                  /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu,
                  ""
                ) // –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
                .replace(/https?:\/\/[^\s]+/g, "") // –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏
                .replace(/\s+/g, " ") // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                .trim();
              console.log(
                `–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ ${post.id}: "${cleanText.substring(
                  0,
                  50
                )}..."`
              );
            } else {
              console.log(`–¢–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ—Å—Ç–∞ ${post.id}`);
            }
          } else {
            console.log(
              `–≠–ª–µ–º–µ–Ω—Ç –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${post.id}, –∏—Å–∫–∞–ª–∏: [data-post="${fullPostId}"]`
            );
          }

          postsWithText.push({
            ...post,
            text: text,
            cleanText: cleanText,
            charCount: cleanText.length,
          });
        });

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        const postsByDate = {};
        postsWithText.forEach((post) => {
          const dateKey = new Date(post.date).toISOString().split("T")[0];
          if (!postsByDate[dateKey]) {
            postsByDate[dateKey] = [];
          }
          postsByDate[dateKey].push({
            id: post.id,
            time: post.date,
            display: post.display,
            text: post.text,
            cleanText: post.cleanText,
            charCount: post.charCount,
            views: post.views,
            forwards: post.forwards,
            replies: post.replies,
          });
        });

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalChars = postsWithText.reduce(
          (sum, post) => sum + post.charCount,
          0
        );
        const avgChars =
          postsWithText.length > 0
            ? Math.round(totalChars / postsWithText.length)
            : 0;

        return {
          total: allPosts.length,
          inPeriod: postsInPeriod.length,
          details: postsByDate,
          allPosts: allPosts, // –í—Å–µ –ø–æ—Å—Ç—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
          postsForScreenshots: postsInPeriod, // –í—Å–µ –ø–æ—Å—Ç—ã –≤ –ø–µ—Ä–∏–æ–¥–µ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
          stats: {
            totalChars: totalChars,
            avgChars: avgChars,
            postsWithText: postsWithText.length,
          },
        };
      },
      startDate,
      endDate,
      channelUsername
    );

    log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Å—á–µ—Ç–∞:`);
    log(`   –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${result.total}`);
    log(`   –ü–æ—Å—Ç–æ–≤ –≤ –ø–µ—Ä–∏–æ–¥–µ: ${result.inPeriod}`);

    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (result.allPosts && result.allPosts.length > 0) {
      log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–≤—ã—Ö 3 –ø–æ—Å—Ç–æ–≤:`);
      result.allPosts.slice(0, 3).forEach((post, index) => {
        log(
          `   –ü–æ—Å—Ç ${index + 1} (ID: ${post.id}): –ü—Ä–æ—Å–º–æ—Ç—Ä—ã=${
            post.views
          }, –ü–µ—Ä–µ—Å—ã–ª–∫–∏=${post.forwards}, –û—Ç–≤–µ—Ç—ã=${post.replies}`
        );
      });
    }

    if (result.inPeriod > 0) {
      log(`üìÖ –ü–æ—Å—Ç—ã –ø–æ –¥–∞—Ç–∞–º:`);
      Object.keys(result.details).forEach((date) => {
        log(`   ${date}: ${result.details[date].length} –ø–æ—Å—Ç–æ–≤`);
      });

      log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º:`);
      log(`   –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: ${result.stats.totalChars}`);
      log(`   –°—Ä–µ–¥–Ω–µ–µ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –ø–æ—Å—Ç: ${result.stats.avgChars}`);
      log(`   –ü–æ—Å—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º: ${result.stats.postsWithText}`);
    }

    // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–æ—Å—Ç–æ–≤
    const screenshots = [];
    log(
      `üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—ã –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${
        result.postsForScreenshots ? result.postsForScreenshots.length : 0
      }`
    );

    if (result.postsForScreenshots && result.postsForScreenshots.length > 0) {
      log(
        `üì∏ –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è ${result.postsForScreenshots.length} –ø–æ—Å—Ç–æ–≤...`
      );

      for (let i = 0; i < result.postsForScreenshots.length; i++) {
        const post = result.postsForScreenshots[i];
        try {
          log(
            `üì∏ –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å—Ç–∞ ${i + 1}/${
              result.postsForScreenshots.length
            }: ${post.id}`
          );

          // ID –ø–æ—Å—Ç–∞ —É–∂–µ –æ—á–∏—â–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
          const postUrl = `https://t.me/${channelUsername}/${post.id}`;
          log(`   üîó –û—Ç–∫—Ä—ã–≤–∞–µ–º ${postUrl}`);

          await page.goto(postUrl, {
            waitUntil: "networkidle2",
            timeout: 30000,
          });
          log(`   ‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–∞...`);
          await new Promise((resolve) => setTimeout(resolve, 5000));

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          const pageTitle = await page.title();
          log(`   üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å—Ç–∞: ${pageTitle}`);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π URL
          const currentUrl = page.url();
          log(`   üîó –¢–µ–∫—É—â–∏–π URL: ${currentUrl}`);

          // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–∞ —Å –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º –ø–æ–¥—Ö–æ–¥–æ–º
          try {
            await page.waitForSelector(".tgme_widget_message", {
              timeout: 10000,
            });
            log(`   ‚úÖ –ü–æ—Å—Ç ${post.id} –∑–∞–≥—Ä—É–∂–µ–Ω (–Ω–∞–π–¥–µ–Ω .tgme_widget_message)`);
          } catch (error) {
            log(
              `   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω .tgme_widget_message, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã...`
            );
            // –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            const alternativeSelectors = [
              ".tgme_widget_message_wrap",
              ".tgme_widget_message_text",
              ".tgme_page_widget",
              "body",
            ];

            let foundSelector = null;
            for (const selector of alternativeSelectors) {
              try {
                await page.waitForSelector(selector, { timeout: 5000 });
                foundSelector = selector;
                log(`   ‚úÖ –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector}`);
                break;
              } catch (e) {
                log(`   ‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä ${selector} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
              }
            }

            if (!foundSelector) {
              throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ");
            }
          }

          const filename = `post_${channelUsername}_${
            post.id
          }_${Date.now()}.png`;
          const filepath = path.join(screenshotDir, filename);

          const clip = await page.evaluate(() => {
            // –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ—Å—Ç–∞
            const postElement = document.querySelector(".tgme_widget_message");
            if (postElement) {
              const rect = postElement.getBoundingClientRect();
              if (rect.width > 0 && rect.height > 0) {
                console.log("–ù–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å—Ç–∞");
                // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ –ø–æ—Å—Ç–∞
                const padding = 20;
                return {
                  x: Math.max(0, Math.round(rect.x - padding)),
                  y: Math.max(0, Math.round(rect.y - padding)),
                  width: Math.round(rect.width + padding * 2),
                  height: Math.round(rect.height + padding * 2),
                };
              }
            }

            // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            const alternativeSelectors = [
              ".tgme_widget_message_wrap",
              ".tgme_page_widget",
              ".tgme_widget_message_text",
            ];

            for (const selector of alternativeSelectors) {
              const element = document.querySelector(selector);
              if (element) {
                const rect = element.getBoundingClientRect();
                if (rect.width > 0 && rect.height > 0) {
                  console.log(`–ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: ${selector}`);
                  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞
                  const padding = 20;
                  return {
                    x: Math.max(0, Math.round(rect.x - padding)),
                    y: Math.max(0, Math.round(rect.y - padding)),
                    width: Math.round(rect.width + padding * 2),
                    height: Math.round(rect.height + padding * 2),
                  };
                }
              }
            }

            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
            console.log("–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏–¥–∏–º—É—é –æ–±–ª–∞—Å—Ç—å");
            return {
              x: 0,
              y: 0,
              width: window.innerWidth,
              height: window.innerHeight,
            };
          });

          if (clip && clip.width > 0 && clip.height > 0) {
            await page.screenshot({
              path: filepath,
              type: "png",
              clip: clip,
            });
            log(`   üìê –û–±–ª–∞—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${clip.width}x${clip.height}px`);
          } else {
            log(
              `   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –ø–æ—Å—Ç–∞, –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã`
            );
            await page.screenshot({
              path: filepath,
              type: "png",
              fullPage: false,
            });
          }

          const fileStats = fs.statSync(filepath);
          log(`   üíæ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename} (${fileStats.size} –±–∞–π—Ç)`);

          // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
          const postText = await page.evaluate(() => {
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            const textSelectors = [
              ".tgme_widget_message_text",
              ".tgme_widget_message_text_wrap",
              ".tgme_widget_message_text_wrap .js-message_text",
              ".tgme_widget_message .js-message_text",
            ];

            for (const selector of textSelectors) {
              const textElement = document.querySelector(selector);
              if (textElement && textElement.textContent.trim()) {
                return textElement.textContent.trim();
              }
            }
            return "";
          });

          // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          const stats = await page.evaluate(() => {
            const viewsElement = document.querySelector(
              ".tgme_widget_message_views"
            );
            const forwardsElement = document.querySelector(
              ".tgme_widget_message_forwards"
            );
            const repliesElement = document.querySelector(
              ".tgme_widget_message_replies"
            );

            return {
              views: viewsElement ? viewsElement.textContent.trim() : "0",
              forwards: forwardsElement
                ? forwardsElement.textContent.trim()
                : "0",
              replies: repliesElement ? repliesElement.textContent.trim() : "0",
            };
          });

          screenshots.push({
            id: post.id,
            type: "post",
            file_path: filename,
            file_size: fileStats.size,
            date: post.date,
            text: postText,
            views: stats.views,
            forwards: stats.forwards,
            replies: stats.replies,
          });

          log(`   ‚úÖ –ü–æ—Å—Ç ${post.id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
        } catch (error) {
          log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞ ${post.id}: ${error.message}`);
          const errorFilename = `error_post_${channelUsername}_${
            post.id
          }_${Date.now()}.txt`;
          const errorPath = path.join(screenshotDir, errorFilename);
          fs.writeFileSync(
            errorPath,
            `–û—à–∏–±–∫–∞: ${error.message}\n\nStack: ${error.stack}`
          );
          log(`   üìù –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ${errorFilename}`);

          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ –º–∞—Å—Å–∏–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
          screenshots.push({
            id: post.id,
            type: "error",
            file_path: errorFilename,
            file_size: fs.statSync(errorPath).size,
            date: post.date,
            text: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${error.message}`,
            views: "0",
            forwards: "0",
            replies: "0",
          });
        }

        await new Promise((resolve) => setTimeout(resolve, 1000));
      }

      log(`üéâ –°–æ–∑–¥–∞–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø–æ—Å—Ç–æ–≤: ${screenshots.length}`);
    } else {
      log(`‚ö†Ô∏è –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤`);
    }

    log(`üìã –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`);
    log(`   –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: ${result.total}`);
    log(`   –ü–æ—Å—Ç–æ–≤ –≤ –ø–µ—Ä–∏–æ–¥–µ: ${result.inPeriod}`);
    log(`   –°–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: ${screenshots.length}`);

    return {
      ...result,
      screenshots: screenshots,
    };
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞: ${error.message}`);
    return {
      total: 0,
      inPeriod: 0,
      details: {},
      screenshots: [],
      error: error.message,
    };
  } finally {
    if (browser) {
      log("üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...");
      await browser.close();
      log("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç");
    }
  }
}

app.listen(PORT, () => {
  log(`üöÄ Simple Count Server —Å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  log(`üì± Frontend: http://localhost:3002`);
  log(`üîß API: http://localhost:${PORT}/api`);
  log(`üè• Health: http://localhost:${PORT}/api/health`);
  log(``);
  log(`üí° –ü–æ–¥—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤ + —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞`);
});
